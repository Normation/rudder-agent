#!/bin/sh
# @description trigger the execution of a remote agent
# @man This command allows to override the agent run schedule and to immediately
# @man update the promises and enforce them on th specified node.
# @man This command is currently only allowed from the policy server of the target node.
# @man +
# @man *Arguments*:
# @man +
# @man *node*: IP or hostname of the target node or 'all' for all nodes of the server
# @man +
# @man *Options*:
# @man +
# @man *-i*: run the agent in information mode, prints basic information
# @man +
# @man *-v*: run the agent in verbose mode, prints detailed information
# @man +
# @man *-d*: run the agent in debug mode, prints low-level information
# @man +
# @man *-q*: run the agent in quiet mode (display only error messages)
# @man +
# @man *-w*: show full strings, never cut output
# @man +
# @man *-c*: run the agent without color output
# @man +
# @man *-r*: run the agent with raw output
# @man +
# @man *-R*: run the agent in completely unparsed mode, with no return code of 1 in case of error. A little faster.
# @man +
# @man *-m*: run the agent with multiline output
# @man +
# @man *-D*: define a class for this run
# @man +
# @man *-a*: run the agent on all known nodes
# @man +
# @man *-g*: run the agent on all nodes of the group UUID given in parameter
# @man +
# @man *-j*: run this number of jobs in parallel
# @man +
# @man *-t*: provide an alternate token for group query (default from ~/.rudder)
# @man +
# @man *-u*: provide an alternate url for group query (default from ~/.rudder)
# @man +
# @man *-C*: provide an alternate config section in ~/.rudder for group query (default to first found)


. "${BASEDIR}/../lib/cfengine_parsing.sh"
. "${BASEDIR}/../lib/api_call.sh"

PORT=5309
LOOP="xargs -I{}"
MULTIHOST=1

# Check for js presence
need_jq() {
  if ! type jq >/dev/null 2>/dev/null
  then
    echo "ERROR: 'jq' must be installed to query hosts from server" 1>&2
    exit 2
  fi
}

while getopts "iIvdqwrRmcb:D:j:at:u:C:" opt; do
  case $opt in
    i|I)
      VERBOSITY="-I ${DEBUG_CLASS}"
      DISPLAY_INFO=1
      QUIET=0
      ;;
    v)
      VERBOSITY="-v ${DEBUG_CLASS}"
      DISPLAY_INFO=1
      QUIET=0
      ;;
    d)
      VERBOSITY="-d ${DEBUG_CLASS}"
      DISPLAY_INFO=1
      QUIET=0
      ;;
    q)
      VERBOSITY=""
      DISPLAY_INFO=0
      QUIET=1
      ;;
    w)
      FULL_STRINGS=1
      ;;
    c)
      clear_colors
      ;;
    r)
      SUMMARY_ONLY=1
      DISPLAY_INFO=1
      ;;
    R)
      PRETTY="cat"
      ;;
    m)
      MULTILINE=1
      ;;
    D)
      CLASS="-D ${OPTARG}"
      ;;
    j)
      if ! type parallel >/dev/null 2>/dev/null
      then
        echo "ERROR: 'parallel' must be installed to run multiple jobs in parallel" 1>&2
        exit 2
      fi
      LOOP="parallel --jobs ${OPTARG}"
      ;;
    g)
      need_jq
      GROUP="${OPTARG}"
      ;;
    a)
      need_jq
      ALL="true"
      ;;
    t)
      TOKEN="${OPTARG}"
      ;;
    u)
      URL="${OPTARG}"
      ;;
    C)
      CONFID="${OPTARG}"
      ;;
  esac
  # to keep the argument as $1
  shift `expr ${OPTIND} - 1`
done

# Define node list method 
if [ -n "${ALL}" ]
then
  NODELIST="get_all_hostnames"
elif [ -n "${GROUP}" ]
then
  NODELIST="get_group_hostids ${GROUP}"
elif [ -z "$1" ]
then
  echo "Usage rudder remote run <node_ip_or_name>"
  exit 1
else
  NODELIST="echo $*"
fi

# get all hosts on server
get_all_hostnames() {
  full_api_call "/api/nodes" "${URL}" "${CONFID}" "${TOKEN}" | jq '.data.nodes[].hostname' | sed -e 's/"\(.*\)"/\1/'
}

# get all hosts in a given group
get_group_hostids() {
  for id in $(full_api_call "/api/groups/$1" "${URL}" "${CONFID}" "${TOKEN}" | jq '.data.groups[0].nodeIds[]')
  do
    full_api_call "/api/nodes/${id}" "${URL}" "${CONFID}" "${TOKEN}" | jq '.data.nodes[0].hostname'
  done | sed -e 's/"\(.*\)"/\1/'
}

# Aggregate everything
${NODELIST} | ${LOOP} "${RUDDER_VAR}/cfengine-community/bin/cf-runagent" -H "{}:${PORT}" ${VERBOSITY} ${COLOR} | eval ${PRETTY}
